CHART NAME: {{ .Chart.Name }}
CHART VERSION: {{ .Chart.Version }}
APP VERSION: {{ .Chart.AppVersion }}

** Please be patient while the chart is being deployed **

---

### **Service Access Information**

After the deployment completes, you can access the application via the Kubernetes service.

- **Service Host**: `{{ .Release.Name }}.{{ .Release.Namespace }}.svc.cluster.local`

- **Service Port**: `{{ .Values.service.port }}`

- **Target Port**: `{{ .Values.service.targetPort }}`
  
The **Service Port** is the port exposed on the service to access the application, while the **Target Port** is the port on which the application itself is listening inside the container. Kubernetes automatically forwards traffic from the service port to the target port.

To test the service locally, you can forward the Kubernetes service port to your local machine. This allows you to access the service as if it were running locally on your computer.

kubectl port-forward svc/{{ .Release.Name }} -n {{ .Release.Namespace }} {{ .Values.service.port }}:{{ .Values.service.targetPort }}

After running the kubectl port-forward command, you can access the application locally by navigating to:

http://localhost:{{ .Values.service.port }}
---

### **Environment Variables**

The application is configured with the following environment variables:

{{- range $key, $value := .Values.env }}
- **{{ $key }}**: "{{ $value }}"
{{- end }}

---

### **Scaling Configuration**

This chart supports automatic scaling. You can configure the number of replicas based on your workload requirements:

- **Enable Auto-Scaling**: `{{ .Values.replicas.enableScaling }}`
- **Desired Replica Count**: `{{ .Values.replicas.desiredCount }}`
- **Minimum Replica Count**: `{{ .Values.replicas.minCount }}`
- **Maximum Replica Count**: `{{ .Values.replicas.maxCount }}`
- **Cooldown Period**: `{{ .Values.replicas.cooldownPeriod }}`
- **Polling Interval**: `{{ .Values.replicas.pollingInterval }}`

Scaling will be applied based on the values set above, ensuring your app can automatically adjust according to the load.

---

### **Resource Configuration**

The application is configured with the following resource requests and limits:

- **CPU Request**: `{{ .Values.resources.requests.cpu }}`
- **Memory Request**: `{{ .Values.resources.requests.memory }}`
  
- **CPU Limit**: `{{ .Values.resources.limits.cpu }}`
- **Memory Limit**: `{{ .Values.resources.limits.memory }}`
  
These values help to ensure optimal performance and resource management. You can adjust them as needed depending on the expected traffic and resource availability.

---

### **Prometheus Monitoring Configuration**

This application supports Prometheus monitoring. The configuration includes the following details:

- **Prometheus Server Address**:
  - **Host**: `{{ .Values.prometheus.serverAddress.host }}`
  - **Port**: `{{ .Values.prometheus.serverAddress.port }}`
  
- **Metric Name**: `{{ .Values.prometheus.metricName }}`
  
- **Prometheus Query**:  
  `{{ .Values.prometheus.query }}`
  
- **Alert Threshold**: `{{ .Values.prometheus.threshold }}`
  
You can use these details to monitor your application’s metrics in Prometheus.

---

### **RBAC Configuration**

The chart configures RBAC to control access to the application’s resources in the Kubernetes cluster. The current configuration grants access to the following resources:

- **RBAC Enabled**: `{{ .Values.rbac.enabled }}`
- **Cluster Scope**: `{{ .Values.rbac.useClusterScope }}`
- **Roles**: 
{{- range .Values.rbac.roles }}
  - apiGroups:
      {{- range .apiGroups }}
      - {{ . }}
      {{- end }}
    resources:
      {{- range .resources }}
      - {{ . }}
      {{- end }}
    verbs:
      {{- range .verbs }}
      - {{ . }}
      {{- end }}
{{- end }}

These roles define the permissions required to interact with Kubernetes resources like pods.
---