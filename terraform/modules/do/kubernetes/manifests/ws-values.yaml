replicaCount: 2
# Redis Cache Configuration (non-sensitive, can go to ConfigMap)
envVarsCM:
  CACHE_REDIS_HOST: "${cache_redis_host}"
  CACHE_REDIS_PORT: "${cache_redis_port}" # Ensure the port is a string
  CACHE_REDIS_CLUSTER_ENABLED: "${cache_redis_cluster_enabled}" # Ensure the value is a string

  ADAPTER_REDIS_HOST: "${adapter_redis_host}"
  ADAPTER_REDIS_PORT: "${adapter_redis_port}" # Ensure the port is a string
  ADAPTER_REDIS_CLUSTER_ENABLED: "${adapter_redis_cluster_enabled}" # Ensure the value is a string

  # Gameplay Test Postgres Configuration (non-sensitive, can go to ConfigMap)
  GAMEPLAY_MONGODB_DBNAME: "${gameplay_mongodb_database}"
  GAMEPLAY_MONGODB_HOST: "${gameplay_mongodb_host}"
  GAMEPLAY_MONGODB_PORT: "${gameplay_mongodb_port}"
  
  WS_PORT: "${port}"  # Specify as string to avoid YAML parsing errors
  WS_HEALTH_CHECK_PORT: "${health_check_port}"  # Specify as string to avoid YAML parsing errors
  WS_CLUSTER_ENABLED: "${cluster_enabled}"  # Specify as string to avoid YAML parsing errors
  WS_ADAPTER: "${adapter}"
  WS_ADMIN_UI_PORT: "${admin_ui_port}"  # Specify as string to avoid YAML parsing errors
  
  PRODUCTION_URL: "${production_url}"  # Specify as string to avoid YAML parsing errors

  # Kafka Configuration (non-sensitive, can go to ConfigMap)
  KAFKA_HOST: "${kafka_host}"
  KAFKA_PORT: "${kafka_port}"
  KAFKA_SASL_ENABLED: "${kafka_sasl_enabled}"

  WS_ALLOW_ORIGIN_1: "${allow_origin_1}"
  WS_ALLOW_ORIGIN_2: "${allow_origin_2}"
envVarsSecret:
  # Redis Cache Configuration (sensitive, should go to Secrets)
  CACHE_REDIS_PASSWORD: "${cache_redis_password}" # Ensure the password is a string

  # Adapter Redis Cache Configuration (sensitive, should go to Secrets)
  ADAPTER_REDIS_PASSWORD: "${adapter_redis_password}" # Ensure the password is a string

  # Gameplay Test Postgres Configuration (sensitive, should go to Secrets)
  GAMEPLAY_MONGODB_USERNAME: "${gameplay_mongodb_username}"
  GAMEPLAY_MONGODB_PASSWORD: "${gameplay_mongodb_password}"

  # Kafka SASL Configuration (sensitive, should go to Secrets)
  KAFKA_SASL_USERNAME: "${kafka_sasl_username}"
  KAFKA_SASL_PASSWORD: "${kafka_sasl_password}"

  JWT_SECRET: "${jwt_secret}"  # Ensure the secret is a string

  SOCKET_IO_ADMIN_USERNAME: "${admin_username}"
  SOCKET_IO_ADMIN_PASSWORD: "${admin_password}"

  # Cipher Secret (sensitive, should go to Secrets)
  CIPHER_SECRET: "${cipher_secret}"

containerPorts:
  app:
    port: ${port}  # Port exposed by the container.
  healthCheck:
    port: ${health_check_port}  # Health check port exposed by the container.

service:
  ports:
    app:
      port: ${port}  # Port exposed by the service.
    healthCheck:
      port: ${health_check_port}  # Health check port exposed by the service.
  extraPorts: 
    - name: admin-ui
      port: ${admin_ui_port}
      targetPort: admin-ui
      protocol: TCP

image:
  registry: docker.io  # Docker registry URL for the image.
  repository: cifarm/ws  # Repository for the container image.
  tag: latest  # Tag for the image.
  digest: ""  # Optionally specify an image digest.
  pullPolicy: Always  # Image pull policy, can be 'Always', 'IfNotPresent', or 'Never'.
  pullSecrets: []  # Secrets for private image pull.

nodeSelector:
  "doks.digitalocean.com/node-pool": ${node_pool_label}

resources:
  requests:
    cpu: ${request_cpu}
    memory: ${request_memory}
  limits:
    cpu: ${limit_cpu}
    memory: ${limit_memory}

extraContainerPorts:
  - name: admin-ui
    containerPort: ${admin_ui_port}
    protocol: TCP
