# Redis Cache Configuration (non-sensitive, can go to ConfigMap)
envVarsCM:
  CACHE_REDIS_HOST: ${cache_redis_host}
  CACHE_REDIS_PORT: "6379"  # Ensure the port is a string

  # Gameplay Test Postgres Configuration (non-sensitive, can go to ConfigMap)
  GAMEPLAY_POSTGRESQL_DBNAME: ${gameplay_postgres_database}
  GAMEPLAY_POSTGRESQL_HOST: ${gameplay_postgresql_host}
  GAMEPLAY_POSTGRESQL_PORT: "5432"
  GAMEPLAY_POSTGRESQL_USER: postgres
  GAMEPLAY_POSTGRESQL_PASS: ${gameplay_postgres_password}

  GAMEPLAY_SUBGRAPH_PORT: "8080"  # Specify as string to avoid YAML parsing errors

# JWT Authentication Configuration (sensitive, should go to Secrets)
envVarsSecret:
  JWT_SECRET: ${jwt_secret}
  JWT_ACCESS_TOKEN_EXPIRATION: "5m"
  JWT_REFRESH_TOKEN_EXPIRATION: "7d"

containerPorts:
  app: 8080  # App port exposed by the container.
  healthCheck: 8081  # Healthcheck port exposed by the container.

image:
  registry: docker.io  # Docker registry URL for the image.
  repository: cifarm/gameplay-service  # Repository for the container image.
  tag: latest  # Tag for the image.
  digest: ""  # Optionally specify an image digest.
  pullPolicy: Always  # Image pull policy, can be 'Always', 'IfNotPresent', or 'Never'.
  pullSecrets: []  # Secrets for private image pull.

nodeSelector:
  "eks.amazonaws.com/nodegroup": ${node_group_label}

resources:
  requests:
    cpu: ${request_cpu}
    memory: ${request_memory}
  limits:
    cpu: ${limit_cpu}
    memory: ${limit_memory}