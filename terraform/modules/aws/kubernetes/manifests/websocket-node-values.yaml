# Redis Cache Configuration (non-sensitive, can go to ConfigMap)
envVarsCM:
  CACHE_REDIS_HOST: "${cache_redis_host}"
  CACHE_REDIS_PORT: "${cache_redis_port}" # Ensure the port is a string

  ADAPTER_REDIS_HOST: "${adapter_redis_host}"
  ADAPTER_REDIS_PORT: "${adapter_redis_port}" # Ensure the port is a string

  # Gameplay Test Postgres Configuration (non-sensitive, can go to ConfigMap)
  GAMEPLAY_POSTGRESQL_DBNAME: "${gameplay_postgresql_database}"
  GAMEPLAY_POSTGRESQL_HOST: "${gameplay_postgresql_host}"
  GAMEPLAY_POSTGRESQL_PORT: "${gameplay_postgresql_port}"
  GAMEPLAY_POSTGRESQL_USERNAME: "${gameplay_postgresql_username}"
  GAMEPLAY_POSTGRESQL_PASSWORD: "${gameplay_postgresql_password}"
  
  WEBSOCKET_NODE_PORT: "${port}"  # Specify as string to avoid YAML parsing errors
  PRODUCTION_URL: "${production_url}"  # Specify as string to avoid YAML parsing errors

  # Kafka Configuration (non-sensitive, can go to ConfigMap)
  KAFKA_1_HOST: "${kafka_1_host}"
  KAFKA_1_PORT: "${kafka_1_port}"

containerPorts:
  app: ${port}  # App port exposed by the container.

image:
  registry: docker.io  # Docker registry URL for the image.
  repository: cifarm/websocket-node  # Repository for the container image.
  tag: latest  # Tag for the image.
  digest: ""  # Optionally specify an image digest.
  pullPolicy: Always  # Image pull policy, can be 'Always', 'IfNotPresent', or 'Never'.
  pullSecrets: []  # Secrets for private image pull.

nodeSelector:
  "eks.amazonaws.com/nodegroup": ${node_group_label}

resources:
  requests:
    cpu: ${request_cpu}
    memory: ${request_memory}
  limits:
    cpu: ${limit_cpu}
    memory: ${limit_memory}