replicaCount: 1  # Number of replicas for the deployment.
# Redis Cache Configuration (non-sensitive, can go to ConfigMap)
envVarsCM:
  TELEGRAM_MINIAPP_URL: "${telegram_miniapp_url}"
  
  # Gameplay Postgres Configuration (non-sensitive, can go to ConfigMap)
  GAMEPLAY_MONGODB_DBNAME: "${gameplay_mongodb_database}"
  GAMEPLAY_MONGODB_HOST: "${gameplay_mongodb_host}"
  GAMEPLAY_MONGODB_PORT: "${gameplay_mongodb_port}"

envVarsSecret:
  # Redis Cache Configuration (sensitive, should go to Secrets)
  TELEGRAM_BOT_TOKEN: "${telegram_bot_token}" # Ensure the token is a string
  TELEGRAM_BOT_HEALTH_CHECK_PORT: "${health_check_port}"  # Specify as string to avoid YAML parsing errors

  # Gameplay Postgres Configuration (sensitive, should go to Secrets)
  GAMEPLAY_MONGODB_USERNAME: "${gameplay_mongodb_username}"
  GAMEPLAY_MONGODB_PASSWORD: "${gameplay_mongodb_password}"

containerPorts:
  app:
    enabled: false
  healthCheck:
    port: ${health_check_port}  # Health check port exposed by the container.

service:
  ports:
    app:
      enabled: false
    healthCheck:
      port: ${health_check_port}  # Health check port exposed by the service.

image:
  registry: docker.io  # Docker registry URL for the image.
  repository: cifarm/telegram-bot  # Repository for the container image.
  tag: latest  # Tag for the image.
  digest: ""  # Optionally specify an image digest.
  pullPolicy: Always  # Image pull policy, can be 'Always', 'IfNotPresent', or 'Never'.
  pullSecrets: []  # Secrets for private image pull.

nodeSelector:
  "eks.amazonaws.com/nodegroup": ${node_group_label}

resources:
  requests:
    cpu: ${request_cpu}
    memory: ${request_memory}
  limits:
    cpu: ${limit_cpu}
    memory: ${limit_memory}

# RBAC and Service Account Configuration
rbac:
  create: true  # Enable creation of RBAC resources.
  rules:
    - apiGroups: ["coordination.k8s.io"]
      resources: ["leases"]
      verbs: ["get", "watch", "list", "create", "update", "delete"]

serviceAccount:
  create: true  # Enable creation of a service account.
  name: ""  # Optionally specify a service account name.
  annotations: {}  # Add annotations for the service account if needed.
  automountServiceAccountToken: true  # Automount the service account token.