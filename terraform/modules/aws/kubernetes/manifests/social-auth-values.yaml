# Redis Cache Configuration (non-sensitive, can go to ConfigMap)
envVarsCM:
  SOCIAL_AUTH_HOST: "${social_auth_host}"
  SOCIAL_AUTH_PORT: "${social_auth_port}"
  SOCIAL_AUTH_HEALTH_CHECK_PORT: "${social_auth_health_check_port}"

  # Rest Api Gateway configuration
  WEB_APP_URL_MAINNET: "${web_app_url_mainnet}"
  WEB_APP_URL_TESTNET: "${web_app_url_testnet}"

# JWT Authentication Configuration (sensitive, should go to Secrets)
envVarsSecret:
  CIPHER_SECRET: "${cipher_secret}"
  SESSION_SECRET: "${session_secret}"

  GOOGLE_CLOUD_OAUTH_CLIENT_ID: "${google_cloud_oauth_client_id}"
  GOOGLE_CLOUD_OAUTH_CLIENT_SECRET: "${google_cloud_oauth_client_secret}"
  GOOGLE_CLOUD_OAUTH_REDIRECT_URI: "${google_cloud_oauth_redirect_uri}"

  X_OAUTH_CLIENT_ID: "${x_oauth_client_id}"
  X_OAUTH_CLIENT_SECRET: "${x_oauth_client_secret}"
  X_OAUTH_REDIRECT_URI: "${x_oauth_redirect_uri}"

  FACEBOOK_OAUTH_CLIENT_ID: "${facebook_oauth_client_id}"
  FACEBOOK_OAUTH_CLIENT_SECRET: "${facebook_oauth_client_secret}"
  FACEBOOK_OAUTH_REDIRECT_URI: "${facebook_oauth_redirect_uri}"

containerPorts:
  app:
    port: ${port}  # Port exposed by the container.
  healthCheck:
    port: ${health_check_port}  # Health check port exposed by the container.

service:
  ports:
    app:
      port: ${port}  # Port exposed by the service.
    healthCheck:
      port: ${health_check_port}  # Health check port exposed by the service.

image:
  registry: docker.io  # Docker registry URL for the image.
  repository: cifarm/social-auth  # Repository for the container image.
  tag: latest  # Tag for the image.
  digest: ""  # Optionally specify an image digest.
  pullPolicy: Always  # Image pull policy, can be 'Always', 'IfNotPresent', or 'Never'.
  pullSecrets: []  # Secrets for private image pull.

nodeSelector:
  "eks.amazonaws.com/nodegroup": ${node_group_label}

resources:
  requests:
    cpu: ${request_cpu}
    memory: ${request_memory}
  limits:
    cpu: ${limit_cpu}
    memory: ${limit_memory}